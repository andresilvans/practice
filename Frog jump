    return jumpFloor( number-2 ) + jumpFloor( number-1 );}

递归

//一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

数学思维: 接上一个跳台阶问题思路继续分析，上个问题中，青蛙只能跳1级或者2级。  则最后一跳只有两种可能，所以F(n) = F(n-1) + F(n-2)
//现在青蛙可以跳n级。  假设台阶为n级，则青蛙可以 跳一次或者多次。  一次： 直接跳n级，这是一种方法。  多次： 青蛙跳到 1到n-1级 任一级（不管怎样跳，跳几次）后再跳一次到n级。
//或者这样分析，青蛙最后一跳，有可能是从起点直接跳到终点，或者从起点跳了若干步后(到达 1到n-1级中间任一级 )再跳到n级。
//所以总的方法数为：青蛙 跳到 1级到n-1级 每级可能的方法数（再跳到n级） + 1（直接跳到n级）
//F(n) = F(n-1) + F(n-2) + ... + F(1) + 1;
//可得: F(n-1) = F(n-2) + F(n-3) +..._F(1) + 1;
//则F(n) = F(n-1) + F(n-1)
//即F(n) = 2F(n-1)
//其实这个题和上个题这种类型题这么分析反而麻烦了。
//如果是笔试遇到这种题，可以把前面几次情况列出来后，观察出数字之间的规律， 直接按规律写函数
//但是按照我们的分析虽然费时得出的答案一定是正确的，找规律得出的答案就不一定正确了。所以还是根据自己拥有时间选择吧。
//面试时先按找到的规律写出函数，如果面试官还要你从逻辑角度陈述你的代码，再按上面的思路分析


int jumpFloorII(int number)
{
    if ( number <= 0 )
        return 0;
        
    if ( 1 == number )
        return 1;
    
    return 2 * jumpFloorII( number-1 );
}
