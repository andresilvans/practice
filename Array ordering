题目：
        输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变

方法一：利用两个指针，实现了是数组奇数在前偶数在后，但通过不了测试用例，因为改变了奇数和奇数，偶数和偶数之间的相对位置

class Solution {
public:
    void reOrderArray(vector<int> &array)
    {
        vector<int>::iterator it1,it2;
        it1=array.begin();
        it2=array.end();
        while(it1<it2)
        {
            while(it1<it2&&(*it1&0x1)==1)
                it1++;
           while(it1<it2&&(*it2&0x1)==0)
                it2--;
                if(it1<it2)
                {
                    int temp=*it1;
                     *it1=*it2;
                     *it2=temp;
                }
        }
    }
};


方法二：建一个临时数组，第一次循环是奇数就放进去，第二次循环放偶数，空间复杂度高，通过测试用例

class Solution {
public:
      void reOrderArray(vector<int> &array)
      {
            vector<int>::iterator it;
            vector<int> NewArray;
            for (it = array.begin(); it != array.end(); it++)
            {

                    // 位运算代替求余运算（提高效率）
                  if ((*it & 0x1) == 1)
                        NewArray.push_back(*it);
            }
            for (it = array.begin(); it != array.end(); it++)
            {
                  if ((*it & 0x1) == 0)
                        NewArray.push_back(*it);
            }
            array = NewArray;
      }
};
