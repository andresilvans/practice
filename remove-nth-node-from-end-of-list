题目描述：

Given a linked list, remove the n th node from the end of list and return its head.
For example,

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.

Note: 
Given n will always be valid.
Try to do this in one pass.

思路：
问题关键在于找到倒数第N个节点，并且尽量只使用一次循环。
采用两个指针，对前指针，使其先走出N步，随后两个指针同时前进，当前指针到达链表尾部时，后指针到达倒数第N个节点的位置。
注意：删除时注意待删除节点为头结点时的情况。

/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/
class Solution {
public:
    ListNode *removeNthFromEnd(ListNode *head, int n) {
        if(NULL == head || n <= 0)
            return NULL;
        
        ListNode* QuickNode = head;
        ListNode* SlowNode = NULL;
        
        // 定义一个新的头结点去接收
        ListNode* newHead = new ListNode(-1);
        newHead->next = head;
        head = newHead;
        
        // 让快指针先走n-1步
        for(int i = 0;i < n-1; i++)
        {
            if(NULL != QuickNode->next)
                QuickNode = QuickNode->next;
            else
                return NULL;
        }
        
        // 让慢指针位于head处，此次让快慢指针一起出发
        SlowNode = head;
        while(NULL != QuickNode->next)
        {
            QuickNode = QuickNode->next;
            SlowNode = SlowNode->next;
        }
        
        ListNode* DelNode = SlowNode->next;
        SlowNode->next = SlowNode->next->next;
        delete DelNode;
        
        return newHead->next;
    }
};
