
题目描述

输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

思路：
    1、先将各bit位相加，不计进位，这一步可以用num1^num2实现
    2、加上进位，进位如何来，用num1&num2可以得到num1和num2中都为1的bit位，而不全为1的位则全部变为了0，该位相加会发生进位，使得左边一位加1，因此(num1&num2)<<1边可得到进位后要加的1的位置；
    3、将前面两步的结果相加，相加的时候还有可能再产生进位，因此二者相加的过程可以再次重复循环步骤1和2，直到(num1&num2)<<1变为了0，这时候不会再产生进位，退出循环即可。

eg:
计算5+7=12，首先看十进制是如何做的：三步走
第一步：相加各位的值，不算进位，得到2。
第二步：计算进位值，得到10. 如果这一步的进位值为0，那么第一步得到的值就是最终结果。
第三步：重复上述两步，只是相加的值变成上述两步的得到的结果2和10，得到12。

用三步走的方式计算二进制值相加： 5-101，7-111
第一步：相加各位的值，不算进位，得到010，二进制每位相加就相当于各位做异或操作，101^111。
第二步：计算进位值，得到1010，相当于各位做与操作得到101，再向左移一位得到1010，(101&111)<<1。
第三步重复上述两步， 各位相加 010^1010=1000，进位值为100=(010&1010)<<1。
继续重复上述两步：1000^100 = 1100，进位值为0，跳出循环，1100为最终结果。


public class Solution {
    public int Add(int num1,int num2) {
        while(num2!=0){
            int ret = num1^num2;
            num2 = (num1 & num2)<<1;
            num1=ret;
        }
        return num1;
    }
}
