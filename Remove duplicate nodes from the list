题目：
        在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。
        例如：链表1->2->3->3->4->4->5处理后为1->2->5


分析：
        从前往后遍历，保留前一个结点，比较当前结点和下一个结点的val，若相等则删除当前结点


ListNode* deleteDuplication(ListNode* pHead)
{
      if (pHead == NULL)
            return 0;
      ListNode* pNode = pHead;                  //移动指针 
      ListNode* pCur = pHead;                //前一位有效的指针 
      // 当pHead->next不为空时，进入while循环
      while (pNode->next != NULL)
      {
            if (pNode->next->val == pNode->val)           //当前和下一位重复
            {
                  int count = pNode->val;         //记录每轮重复的指针数值 
                  while (pNode->val == count)
                  {
                        ListNode* pDel = pNode;
                        if (pHead == pNode)            //如果是头节点则删除，把头节点往后移 
                        {
                              if (pNode->next == NULL)    //到达链表末尾，链表元素全被删除，返回0。 
                                    return 0;
                              pNode = pNode->next;
                              pHead = pNode;
                              pCur = pHead;
                              delete pDel;
                              continue;
                        }
                        else                //如果不是则删除，pCur->next指下一位 
                        {
                              if (pNode->next == NULL)    //到达链表末尾，pCur->next置空。 
                              {
                                    pCur->next = NULL;
                                    break;
                              }
                              pNode = pNode->next;
                              pCur->next = pNode;
                              delete pDel;
                        }
                  }
            }
            else                        //当前和下一位不重复
            {
                  pCur = pNode;
                  pNode = pNode->next;
            }
      }
      return pHead;
}

递归做法：

/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    ListNode* deleteDuplication(ListNode* pHead)
    {
        if(NULL == pHead)
        {
            return NULL;
        }
        if(NULL != pHead && NULL == pHead->next)
        {
            return pHead;
        }
        
        ListNode* pCur;
        
        if (pHead->val == pHead->next->val)
        {
            pCur = pHead->next->next;
            
            while(NULL != pCur && pCur->val == pHead->val)
                pCur = pCur->next;
            return deleteDuplication(pCur);
         }
        else
        {
            pCur = pHead->next;
            pHead->next = deleteDuplication(pCur);
            return pHead;
        }
    }
};
