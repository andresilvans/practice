//题目：
//  Given a collection of numbers, return all possible permutations.
//  For example,
//  [1,2,3]have the following permutations:
//  [1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2], and[3,2,1].
    
#include <vector>    
//class Solution {
//public:
//	vector<vector<int> > permute(vector<int> &num) {
//		vector<vector<int>> V;
//
//		// 判断
//		if (num.size() == 0)
//			return V;
//		else if (num.size() == 1)
//		{
//			V.push_back(num);
//			return V;
//		}
//		else
//		{
//			int value = num[num.size() - 1];
//			num.pop_back();
//
//			// 定义一个新的存储空间用来存放num里面的数据
//			vector<vector<int>> newV;
//			newV = permute(num);
//
//			//两层循环
//			for (int i = 0; i < newV.size(); ++i)
//			{
//				vector<int> temp;
//				temp = newV[i];
//
//				for (int j = 0; j <= temp.size(); j++)
//				{
//					temp.insert(temp.begin() + j, 1, value);
//					V.push_back(temp);
//
//					temp.clear();
//					temp = newV[i];
//				}
//			}
//			return V;
//		}
//	}
//};

// 调用已有函数排序
// 在C++的标准函数库STL中，next_permutation()函数用于求数列的全排列。


//#include <algorithm>
//class Solution {
//public:
//	vector<vector<int>> permute(vector<int>& nums) {
//		vector<vector<int>> result;
//		sort(nums.begin(), nums.end());
//		do{
//			result.push_back(nums);
//		} while (next_permutation(nums.begin(), nums.end()));
//		return result;
//	}
//};
