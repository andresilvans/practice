题目描述：用两个栈实现队列用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
思路：
        1，整体思路是元素先依次进入栈1，再从栈1依次弹出到栈2，然后弹出栈2顶部的元素，整个过程就是一个队列的先进先出
        2，但是在交换元素的时候需要判断两个栈的元素情况：
        “进队列时”，队列中是还还有元素，若有，说明栈2中的元素不为空，此时就先将栈2的元素倒回到栈1 中，保持在“进队列状态”。
        “出队列时”，将栈1的元素全部弹到栈2中，保持在“出队列状态”。

所以要做的判断是，进时，栈2是否为空，不为空，则栈2元素倒回到栈1，出时，将栈1元素全部弹到栈2中，直到栈1为空。

思路：用一个栈模拟的时候入队出队的情况正好相反，再加一个栈正好符合队列顺序，不过要注意当用第二个栈来模拟出队时，要确保每次只有当第二个栈为空时才从第一个栈中pop值到第二个栈中。

class Solution
{
public:
    void push(int node) {
        stack1.push(node);
    }

    int pop() {
        if(stack2.empty())
        {
            while(!stack1.empty())
            {
                int tmp = stack1.top();
                stack2.push(tmp);
                stack1.pop();
            }
        }
        int pnode = stack2.top();
        stack2.pop();
        return pnode;
    }

private:
    stack<int> stack1;
    stack<int> stack2;
};
