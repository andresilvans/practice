题目描述：
        请实现一个函数，用来判断一棵二叉树是不是对称的注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的
思路：
	* 
判断一颗二叉树是不是对称的，等价于判断其左右子树是不是镜像对称的
	* 
判断镜对称像即判断对称的位置上的元素是不是相等
	* 
两个节点A和B对称等价于:


                    这两个节点上存储的值相等
                    节点A的左子树节点和节点B的右子树上的节点是对称的
                    节点A的右子树节点和节点B的左子树上的节点是对称的


// 对称的二叉树
#include<iostream>
using namespace std;
struct TreeNode {
      int val;
      struct TreeNode *left;
      struct TreeNode *right;
      TreeNode(int x) :
      val(x), left(NULL), right(NULL)
      {}
};
class Solution {
public:
      bool Compare(TreeNode* pLeft, TreeNode* pRight)
      {
            // 左右子树均不存在，只剩下根节点，对称
            if (NULL == pLeft && NULL == pRight)
                  return true;
            // 左子树不存在或者右子树不存在，不对称
            if (NULL == pLeft || NULL == pRight)
                  return false;
            // 左右子树的值相等时，继续往下判断
            if (pLeft->val == pRight->val)
                  return Compare(pLeft->left, pRight->right) && Compare(pLeft->right, pRight->left);
            return false;
      }
      bool isSymmetrical(TreeNode* pRoot)
      {
            if (NULL == pRoot)
                  return true;
            return Compare(pRoot->left, pRoot->right);
      }
};
