题目描述：

Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
You should preserve the original relative order of the nodes in each of the two partitions.
For example,
Given1->4->3->2->5->2and x = 3,
return1->2->2->4->3->5.

给定一个链表和一个值x，对它进行划分，使小于x的所有节点都先于大于或等于x的节点。
您应该保留两个分区中每个节点的原始相对顺序。
例如,
Given1 - > 4 - > 3 - > 2 - > 5 - > 2和x = 3,
return1 - > 2 - > 2 - > 4 - > 3 - > 5。

思路：
        新建两个链表，一个去挂大结点，一个去挂结点
        遍历整个链表，判断每个结点的值的大小
        将之对应之挂在大小链表的下面，最后将两个链表合并并返回


代码：

/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/
class Solution {
public:
    ListNode *partition(ListNode *head, int x) {
        ListNode* pNode = head;
        ListNode* LessHead = new ListNode(-1);
        ListNode* GreaterHead = new ListNode(-1);
        
        ListNode* pLess = LessHead;
        ListNode* pGreater = GreaterHead;
        
        while(NULL != pNode)
        {
            ListNode* pCur = pNode->next;
            
            if(x > pNode->val)
            {
                pLess->next = pNode;
                pLess = pLess->next;
                pLess->next = NULL;
            }
            else
            {
                pGreater->next = pNode;
                pGreater = pGreater->next;
                pGreater->next = NULL;
            }
            pNode = pCur;
        }
        pLess->next = GreaterHead->next;
        return LessHead->next;
    }
};
