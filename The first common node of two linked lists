题目：
        输入两个链表，找出它们的第一个公共结点



        面试这道题的时候很多的面试者第一反应就是采用蛮力的方法：在第一个链表上顺序遍历每个节点，每遍历到一个节点的时候，在第二个链表上顺序遍历每个节点。如果第二个链表上的节点和第一个链表上的节点一样，就说明两个链表在节点上重合，于是就找到了公共的节点。而通常蛮力并不是好的方法。

从链表的定义可以看出，这两个链表是单链表，如果两个链表有公共节点，那么这两个链表从某一节点开始，它们的m_pNext都指向同一个节点，之后它们所有的节点都是重合的，不可能再出现分叉。所以拓扑形状看起来是Y型。
        一个简单的方法是：首先遍历两个链表得到它们的长度，就能知道哪个链表比较长，以及长的链表比短的链表多几个节点。在第二次遍历的时候，先在较长的节点上走若干步，接着同时在两个链表上遍历，找到的第一个相同的节点就是它们的公共的节点。】、



ListNode* FindFirstCommonNode(ListNode* pHead1, ListNode *pHead2)
{
      //得到两个链表的长度 
      unsigned int nLength1 = GetListLength(pHead1);
      unsigned int nLength2 = GetListLength(pHead2);
      int nLengthDif = nLength1 - nLength2;
      ListNode *pHeadLong = pHead1;
      ListNode *pHeadShort = pHead2;
      if (nLength2 > nLength1)
      {
            ListNode *pHeadLong = pHead2;
            ListNode *pHeadShort = pHead1;
            nLengthDif = nLength2 - nLength1;
      }
      //先在长链表上走几步，再同时在两个链表上遍历。 
      for (int i = 0; i < nLengthDif; i++)
            pHeadLong = pHeadLong->m_pNext;
      while ((pHeadLong != NULL) && (pHeadShort != NULL)
            && (pHeadLong != pHeadShort))
      {
            pHeadLong = pHeadLong->m_pNext;
            pHeadShort = pHeadShort->m_pNext;
      }
      //得到第一个公共节点 
      ListNode *pFirstCommonNode = pHeadLong;
      return pFirstCommonNode;
}
//求链表长度的函数 
unsigned int GetListLength(ListNode *pHead)
{
      unsigned int Length = 0;
      ListNode *pNode = pHead;
      while (pNode != NULL)
      {
            ++Length;
            pNode = pNode->m_pNext;
      }
      return Length;
}
